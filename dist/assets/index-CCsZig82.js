var nt=Object.defineProperty;var at=(u,t,e)=>t in u?nt(u,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):u[t]=e;var o=(u,t,e)=>at(u,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function e(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=e(n);fetch(n.href,i)}})();class d{constructor(t=0,e=0){this.x=t,this.y=e}clone(){return new d(this.x,this.y)}set(t,e){return this.x=t,this.y=e,this}add(t){return this.x+=t.x,this.y+=t.y,this}sub(t){return this.x-=t.x,this.y-=t.y,this}scale(t){return this.x*=t,this.y*=t,this}dot(t){return this.x*t.x+this.y*t.y}len(){return Math.hypot(this.x,this.y)}normalize(){const t=this.len();return t>1e-8&&(this.x/=t,this.y/=t),this}rotated(t){const e=Math.cos(t),s=Math.sin(t);return new d(this.x*e-this.y*s,this.x*s+this.y*e)}static add(t,e){return new d(t.x+e.x,t.y+e.y)}static sub(t,e){return new d(t.x-e.x,t.y-e.y)}static scale(t,e){return new d(t.x*e,t.y*e)}}class ot{constructor(){o(this,"down",new Set);o(this,"pressed",new Set);window.addEventListener("keydown",t=>{const e=t.code;(e==="ArrowUp"||e==="ArrowDown"||e==="ArrowLeft"||e==="ArrowRight"||e==="Space")&&t.preventDefault(),this.down.has(e)||this.pressed.add(e),this.down.add(e)}),window.addEventListener("keyup",t=>{this.down.delete(t.code)}),window.addEventListener("blur",()=>{this.down.clear()})}isDown(t){return this.down.has(t)}wasPressed(t){return this.consume(this.pressed,t)}consume(t,e){return t.has(e)?(t.delete(e),!0):!1}updateFrame(){this.pressed.clear()}}class rt{static loadImage(t){return new Promise((e,s)=>{const n=new Image;n.onload=()=>e(n),n.onerror=i=>s(i),n.src=t})}}class lt{constructor(t=new d(0,0)){o(this,"_position",new d(0,0));o(this,"velocityLeadFactor",.25);this._position=t.clone()}get position(){return this._position.clone()}setPosition(t){this._position.set(t.x,t.y)}followTarget(t,e){const s=d.scale(e,this.velocityLeadFactor),n=d.add(t,s);this._position.set(n.x,n.y)}getViewport(t,e,s=1){const n=t/s,i=e/s,a=n/2,r=i/2;return{left:this._position.x-a,right:this._position.x+a,top:this._position.y-r,bottom:this._position.y+r,width:n,height:i}}worldToScreen(t,e,s,n=1){const i=e/n,a=s/n;return new d(t.x-this._position.x+i/2,t.y-this._position.y+a/2)}screenToWorld(t,e,s,n=1){const i=e/n,a=s/n;return new d(t.x-i/2+this._position.x,t.y-a/2+this._position.y)}setVelocityLeadFactor(t){this.velocityLeadFactor=Math.max(0,Math.min(1,t))}}class ht{constructor(t){o(this,"config");this.config=t}getBounds(){return this.config.bounds}getWorldSize(){const t=this.config.bounds;return{width:t.maxX-t.minX,height:t.maxY-t.minY}}isPositionInBounds(t,e=0){const s=this.config.bounds;return t.x>=s.minX-e&&t.x<=s.maxX+e&&t.y>=s.minY-e&&t.y<=s.maxY+e}applyWorldBoundsToShip(t){const e=this.config.bounds,s=this.config.boundaryBounce,n=t.length*.5,i=t.width*.5,a={minX:e.minX+n,maxX:e.maxX-n,minY:e.minY+i,maxY:e.maxY-i};t.pos.x<a.minX&&(t.pos.x=a.minX,t.vel.x<0&&(t.vel.x*=-s)),t.pos.x>a.maxX&&(t.pos.x=a.maxX,t.vel.x>0&&(t.vel.x*=-s)),t.pos.y<a.minY&&(t.pos.y=a.minY,t.vel.y<0&&(t.vel.y*=-s)),t.pos.y>a.maxY&&(t.pos.y=a.maxY,t.vel.y>0&&(t.vel.y*=-s))}isPositionOutsideWorld(t,e=500){const s=this.config.bounds;return t.x<s.minX-e||t.x>s.maxX+e||t.y<s.minY-e||t.y>s.maxY+e}}class ct{constructor(){o(this,"ships",[]);o(this,"projectiles",[]);o(this,"_player",null)}get player(){return this._player}setPlayer(t){this._player=t,this.ships.includes(t)||this.ships.push(t)}addShip(t){this.ships.push(t)}removeShip(t){const e=this.ships.indexOf(t);e>=0&&this.ships.splice(e,1),this._player===t&&(this._player=null)}addProjectile(t){this.projectiles.push(t)}getAllShips(){return this.ships}getEnemyShips(){return this.ships.filter(t=>t!==this._player)}getAllProjectiles(){return this.projectiles}getShipsNear(t,e){const s=e*e;return this.ships.filter(n=>d.sub(n.pos,t).dot(d.sub(n.pos,t))<=s)}getShipsInViewport(t){return this.ships.filter(e=>e.pos.x>=t.left-e.length&&e.pos.x<=t.right+e.length&&e.pos.y>=t.top-e.width&&e.pos.y<=t.bottom+e.width)}update(t){for(const e of this.projectiles)e.update(t)}cleanup(){for(let t=this.projectiles.length-1;t>=0;t--)this.projectiles[t].alive||this.projectiles.splice(t,1);for(let t=this.ships.length-1;t>=0;t--){const e=this.ships[t];e!==this._player&&e.isSinking&&e.isFullySunk()&&this.ships.splice(t,1)}}draw(t,e,s,n){for(const i of this.projectiles)i.draw(t,e,s,n);for(const i of this.ships)i.draw(t,e,s,n)}clear(){this.ships.length=0,this.projectiles.length=0,this._player=null}getEntityCounts(){return{ships:this.ships.length,projectiles:this.projectiles.length,total:this.ships.length+this.projectiles.length}}}class dt{constructor(t){o(this,"collisionCooldowns",new Map);o(this,"config");this.config=t}update(t){for(const[e,s]of Array.from(this.collisionCooldowns.entries())){const n=s-t;n<=0?this.collisionCooldowns.delete(e):this.collisionCooldowns.set(e,n)}}resolveShipCollisions(t){for(let s=0;s<2;s++)for(let n=0;n<t.length;n++)for(let i=n+1;i<t.length;i++)this.resolveShipPairCollision(t[n],t[i])}resolveShipPairCollision(t,e){if(t.isSinking&&t.isFullySunk()||e.isSinking&&e.isFullySunk())return;const s=e.pos.x-t.pos.x,n=e.pos.y-t.pos.y,i=s*s+n*n;if(i<=1e-6){t.pos.x-=1,e.pos.x+=1;return}const a=t.getCollisionRadius(),r=e.getCollisionRadius(),c=a+r;if(i>=c*c)return;const l=Math.sqrt(i),h=s/l,p=n/l,m=c-l,g=t.getMass(),f=e.getMass(),w=g+f,y=m*(f/w)*.5,I=m*(g/w)*.5;t.pos.x-=h*y,t.pos.y-=p*y,e.pos.x+=h*I,e.pos.y+=p*I;const M=e.vel.x-t.vel.x,S=e.vel.y-t.vel.y,T=M*h+S*p;if(T>=0)return;const v=-(1+this.config.restitution)*T/(1/g+1/f),k=v*h,A=v*p;t.vel.x-=k/g,t.vel.y-=A/g,e.vel.x+=k/f,e.vel.y+=A/f;const W=-p,U=h,j=M*W+S*U,C=Math.max(-this.config.friction*v,Math.min(this.config.friction*v,-j/(1/g+1/f))),H=C*W,_=C*U;t.vel.x-=H/g,t.vel.y-=_/g,e.vel.x+=H/f,e.vel.y+=_/f,t.angVel-=j*8e-4,e.angVel+=j*8e-4,this.applyRammingDamage(t,e,Math.sqrt(M*M+S*S),h,p)}applyRammingDamage(t,e,s,n,i){const a=`${Math.min(t.id,e.id)}|${Math.max(t.id,e.id)}`;if(this.collisionCooldowns.has(a))return;const r=t.forwardVec(),c=e.forwardVec(),l=r.x*n+r.y*i,h=c.x*-n+c.y*-i,p=.7,m=l>p,g=h>p;let f=0,w=0;if(m!==g){const y=Math.max(20,s*.67);m?(w=y,f=y/3):(f=y,w=y/3)}else f=w=s*.25;t.health,e.health,t.takeDamage(f),e.takeDamage(w),t.health<=0&&!t.isSinking&&t.startSinking(),e.health<=0&&!e.isSinking&&e.startSinking(),this.collisionCooldowns.set(a,this.config.damageCooldown)}checkProjectileHits(t,e){const s=[];for(let n=t.length-1;n>=0;n--){const i=t[n];for(const a of e)if(i.owner!==a&&!(a.isSinking&&a.isFullySunk())&&a.hitsCircle(i.pos,i.radius)){const r=a.health;a.takeDamage(i.damage),a.isSinking&&(a.sinkTimer=Math.min(a.sinkDuration,a.sinkTimer+1)),a.health<=0&&!a.isSinking&&a.startSinking(),s.push({projectile:i,ship:a,damage:i.damage,wasKilled:r>0&&a.health<=0,projectileIndex:n}),t.splice(n,1);break}}return s}}class pt{constructor(){o(this,"cannonIndicators",new gt);o(this,"metricsDisplay",new ut);o(this,"minimap",new K);o(this,"overlayManager",new ft)}initialize(){this.cannonIndicators.initialize(),this.metricsDisplay.initialize(),this.overlayManager.initialize()}update(t,e,s,n=[]){this.cannonIndicators.update(t,n),this.metricsDisplay.update(t,e,s)}setupForPlayer(t,e=[]){this.cannonIndicators.setupForShip(t,e)}drawToCanvas(t,e,s,n,i,a){this.minimap.draw(t,e,s,n,i,a)}getOverlayManager(){return this.overlayManager}}class gt{constructor(){o(this,"portDots",[]);o(this,"starboardDots",[]);o(this,"torpedoDots",[])}initialize(){}setupForShip(t,e=[]){const s=document.getElementById("hud"),n=s.querySelector(".dots.port"),i=s.querySelector(".dots.starboard"),a=s.querySelector(".dots.torpedo");n.innerHTML="",i.innerHTML="",a&&(a.innerHTML="");const r=t.cannons.filter(l=>l.side==="port"),c=t.cannons.filter(l=>l.side==="starboard");this.portDots=[];for(let l=0;l<r.length;l++){const h=document.createElement("span");h.className="dot",n.appendChild(h),this.portDots.push(h)}this.starboardDots=[];for(let l=0;l<c.length;l++){const h=document.createElement("span");h.className="dot",i.appendChild(h),this.starboardDots.push(h)}if(this.torpedoDots=[],a&&e.length>0)for(let l=0;l<e.length;l++){const h=document.createElement("span");h.className="dot",a.appendChild(h),this.torpedoDots.push(h)}}update(t,e=[]){const s=t.cannons.filter(i=>i.side==="port");for(let i=0;i<this.portDots.length&&i<s.length;i++)this.updateCannonDot(this.portDots[i],s[i]);const n=t.cannons.filter(i=>i.side==="starboard");for(let i=0;i<this.starboardDots.length&&i<n.length;i++)this.updateCannonDot(this.starboardDots[i],n[i]);for(let i=0;i<this.torpedoDots.length&&i<e.length;i++)this.updateTorpedoDot(this.torpedoDots[i],e[i])}updateCannonDot(t,e){const s=e.cooldown<=0;if(t.classList.toggle("ready",s),s)t.style.background="";else{const n=1-e.cooldown/e.reloadTime,i=Math.max(0,Math.min(1,n))*360;t.style.background=`conic-gradient(#f59e0b ${i}deg, rgba(255,255,255,0.08) 0)`}}updateTorpedoDot(t,e){const s=e.cooldown<=0&&e.arming<=0;if(t.classList.toggle("ready",s),s)t.style.background="";else{const n=e.arming>0,i=n?1:15,r=1-(n?e.arming:e.cooldown)/i,c=Math.max(0,Math.min(1,r))*360;t.style.background=`conic-gradient(#60a5fa ${c}deg, rgba(255,255,255,0.08) 0)`}}}class ut{constructor(){o(this,"element",null)}initialize(){const t=document.getElementById("hud");this.element=document.createElement("div"),this.element.id="metrics",this.element.style.marginTop="8px",this.element.style.fontSize="12px",this.element.style.opacity="0.9",this.element.style.whiteSpace="pre",t.appendChild(this.element)}update(t,e,s){if(!this.element)return;const n=Math.round(t.pos.x),i=Math.round(t.pos.y),a=Math.round(t.vel.len()),r=Math.floor(e),c=s?" (press S shop)":"";this.element.textContent=`Pos: (${n}, ${i})
Speed: ${a} px/s
XP: ${r}${c}`}}const O=class O{draw(t,e,s,n,i,a){const r=O.SIZE,c=O.MARGIN,l=O.PADDING,h=window.devicePixelRatio||1,p=n/h,m=i/h,g=p-r-c,f=m-r-c,w=r-l*2,y=a.maxX-a.minX,I=a.maxY-a.minY,M=Math.min(w/y,w/I),S=(w-y*M)/2,T=(w-I*M)/2;t.save(),t.fillStyle="rgba(0,0,0,0.35)",t.fillRect(g,f,r,r),t.strokeStyle="rgba(255,255,255,0.25)",t.lineWidth=2,t.strokeRect(g+.5,f+.5,r-1,r-1),t.strokeStyle="rgba(255,255,255,0.25)",t.strokeRect(g+l+S,f+l+T,y*M,I*M);for(const v of e){const k=g+l+S+(v.pos.x-a.minX)*M,A=f+l+T+(v.pos.y-a.minY)*M;t.beginPath(),t.arc(k,A,v.isPlayer?4:3,0,Math.PI*2),v.isPlayer?(t.fillStyle="#f59e0b",t.strokeStyle="#1f2937",t.lineWidth=1,t.fill(),t.stroke()):(t.fillStyle="#ef4444",t.strokeStyle="rgba(0,0,0,0.6)",t.lineWidth=1,t.fill(),t.stroke())}t.restore()}};o(O,"SIZE",180),o(O,"MARGIN",12),o(O,"PADDING",10);let K=O;class ft{constructor(){o(this,"upgradeOverlay",null);o(this,"respawnLabel",null);o(this,"isUpgradeOverlayOpen",!1)}initialize(){}isUpgradeOverlayVisible(){return this.isUpgradeOverlayOpen}openUpgradeOverlay(t,e,s){this.upgradeOverlay||this.createUpgradeOverlay(),this.updateUpgradeOverlayContent(t,e,s),this.isUpgradeOverlayOpen=!0,this.upgradeOverlay.style.display="block"}closeUpgradeOverlay(){this.isUpgradeOverlayOpen=!1,this.upgradeOverlay&&(this.upgradeOverlay.style.display="none")}showRespawnCountdown(t){this.respawnLabel||this.createRespawnLabel(),this.respawnLabel.style.display="inline-block",this.respawnLabel.textContent=`Respawning in ${Math.ceil(t)}s...`}hideRespawnCountdown(){this.respawnLabel&&(this.respawnLabel.style.display="none")}createUpgradeOverlay(){const t=document.getElementById("hud");this.upgradeOverlay=document.createElement("div"),this.upgradeOverlay.id="upgrade-overlay",Object.assign(this.upgradeOverlay.style,{position:"fixed",left:"50%",top:"50%",transform:"translate(-50%, -50%)",background:"rgba(0,0,0,0.6)",border:"1px solid rgba(255,255,255,0.35)",padding:"16px",borderRadius:"10px",color:"#e6f0ff",zIndex:"1000",minWidth:"320px",textAlign:"left",boxShadow:"0 8px 24px rgba(0,0,0,0.5)"}),t.appendChild(this.upgradeOverlay)}updateUpgradeOverlayContent(t,e,s){if(!this.upgradeOverlay)return;this.upgradeOverlay.innerHTML="";const n=document.createElement("div");n.textContent=`Shop — XP: ${Math.floor(t)}`,n.style.fontWeight="bold",n.style.marginBottom="8px",this.upgradeOverlay.appendChild(n);const i=document.createElement("div");Object.assign(i.style,{display:"flex",flexDirection:"column",gap:"8px"}),this.upgradeOverlay.appendChild(i);const a=(c,l,h)=>{const p=document.createElement("button");p.textContent=c,Object.assign(p.style,{padding:"8px 10px",borderRadius:"6px",border:"1px solid rgba(255,255,255,0.4)",background:l?"rgba(255,255,255,0.08)":"rgba(255,255,255,0.06)",color:l?"#e6f0ff":"rgba(230,240,255,0.5)",cursor:l?"pointer":"not-allowed"}),l&&p.addEventListener("click",h),i.appendChild(p)};a(`1) Repair ship (+50% max) — ${Math.ceil(e.repair)} XP`,t>=e.repair,()=>s("repair")),a(`2) Reinforce hull (+30 max & current) — ${Math.ceil(e.reinforce)} XP`,t>=e.reinforce,()=>s("reinforce")),a(`3) Add cannons (+2 per side) — ${Math.ceil(e.cannons)} XP`,t>=e.cannons,()=>s("cannons"));const r=document.createElement("div");r.textContent="Tip: press 1 / 2 / 3 to choose",r.style.opacity="0.8",r.style.marginTop="8px",r.style.fontSize="12px",this.upgradeOverlay.appendChild(r)}createRespawnLabel(){const t=document.getElementById("hud");this.respawnLabel=document.createElement("div"),this.respawnLabel.id="respawn-label",Object.assign(this.respawnLabel.style,{marginTop:"8px",padding:"4px 8px",borderRadius:"6px",background:"rgba(0,0,0,0.35)",border:"1px solid rgba(255,255,255,0.25)",display:"none"}),t.appendChild(this.respawnLabel)}}class tt{constructor(t,e,s){o(this,"pos");o(this,"vel");o(this,"radius",3);o(this,"life",0);o(this,"maxLife",4);o(this,"damage",12);o(this,"owner");this.pos=t.clone(),this.vel=e.clone(),this.owner=s}update(t){this.pos.add(d.scale(this.vel,t)),this.life+=t}get alive(){return this.life<this.maxLife}draw(t,e,s,n){const i=this.pos.x-e.x+s/2,a=this.pos.y-e.y+n/2;t.save(),t.fillStyle="#1f2937",t.beginPath(),t.arc(i,a,this.radius,0,Math.PI*2),t.fill(),t.fillStyle="rgba(255,255,255,0.5)",t.beginPath(),t.arc(i-this.radius*.3,a-this.radius*.3,this.radius*.4,0,Math.PI*2),t.fill(),t.restore()}}const $=class ${constructor(t={},e){o(this,"id");o(this,"pos",new d(0,0));o(this,"vel",new d(0,0));o(this,"angle",-Math.PI/2);o(this,"angVel",0);o(this,"rudder",0);o(this,"maxHealth",100);o(this,"health",100);o(this,"isPlayer",!1);o(this,"isSinking",!1);o(this,"sinkTimer",0);o(this,"sinkDuration",10);o(this,"maxSpeed",180);o(this,"thrust",50);o(this,"reverseThrust",20);o(this,"turnAccel",1);o(this,"rudderRate",1.5);o(this,"linDrag",.4);o(this,"angDrag",2);o(this,"length");o(this,"width");o(this,"cannons",[]);o(this,"sprite");o(this,"portIndices",[]);o(this,"starboardIndices",[]);o(this,"nextPort",0);o(this,"nextStarboard",0);o(this,"fireTimerPort",0);o(this,"fireTimerStarboard",0);o(this,"interShotDelay",.08);this.id=$._nextId++,this.length=t.length??120,this.width=t.width??44;const s=t.cannonPairs??6;this.sprite=e,this.setupCannons(s)}setupCannons(t){const e=this.length*.18,s=this.length-e*2;for(let n=0;n<t;n++){const i=(n+.5)/t,a=-this.length/2+e+s*i,r=this.width/2,c=2.2+Math.random()*1.4;this.cannons.push({offset:new d(a,+r),side:"starboard",reloadTime:c,cooldown:0}),this.starboardIndices.push(this.cannons.length-1),this.cannons.push({offset:new d(a,-r),side:"port",reloadTime:c*(.9+Math.random()*.2),cooldown:0}),this.portIndices.push(this.cannons.length-1)}}forwardVec(){return new d(Math.cos(this.angle),Math.sin(this.angle))}rightVec(){return new d(Math.cos(this.angle+Math.PI/2),Math.sin(this.angle+Math.PI/2))}update(t,e,s){this.isSinking&&(this.sinkTimer+=t,e={up:!1,down:!1,left:!1,right:!1,fire:!1});const i=.5+.5*Math.max(0,Math.min(1,this.health/Math.max(1,this.maxHealth))),a=this.forwardVec();e.up&&this.vel.add(d.scale(a,this.thrust*i*t)),e.down&&this.vel.add(d.scale(a,-this.reverseThrust*i*t));let r=this.vel.len();r>this.maxSpeed&&this.vel.scale(this.maxSpeed/Math.max(1e-6,r));const c=(e.left?-1:0)+(e.right?1:0),l=Math.max(-1,Math.min(1,c));this.rudder<l?this.rudder=Math.min(l,this.rudder+this.rudderRate*t):this.rudder>l&&(this.rudder=Math.max(l,this.rudder-this.rudderRate*t)),r=this.vel.len();const h=.4+1.2*Math.min(1,r/this.maxSpeed);this.angVel+=this.rudder*(this.turnAccel*i)*h*t;const p=1/(1+this.linDrag*t);this.vel.scale(p);const m=1/(1+this.angDrag*t);this.angVel*=m,this.pos.add(d.scale(this.vel,t)),this.angle+=this.angVel*t;for(const g of this.cannons)g.cooldown=Math.max(0,g.cooldown-t);this.fireTimerPort=Math.max(0,this.fireTimerPort-t),this.fireTimerStarboard=Math.max(0,this.fireTimerStarboard-t),e.fire&&!this.isSinking&&(this.tryFireSide("port",s),this.tryFireSide("starboard",s))}localToWorld(t){const e=t.rotated(this.angle);return d.add(this.pos,e)}tryFireSide(t,e){const s=t==="port"?this.portIndices:this.starboardIndices;if(!s.length||(t==="port"?this.fireTimerPort:this.fireTimerStarboard)>0)return;let i=t==="port"?this.nextPort:this.nextStarboard;const a=s.length;for(let r=0;r<a;r++){const c=s[(i+r)%a],l=this.cannons[c];if(l.cooldown<=0){const h=this.rightVec(),p=t==="starboard"?h.clone():h.clone().scale(-1),m=380,g=.04,f=this.localToWorld(l.offset),w=p.rotated((Math.random()-.5)*g),y=d.add(this.vel,d.scale(w,m));e.push(new tt(f,y,this)),l.cooldown=l.reloadTime,i=(i+r+1)%a,t==="port"?(this.nextPort=i,this.fireTimerPort=this.interShotDelay):(this.nextStarboard=i,this.fireTimerStarboard=this.interShotDelay);return}}}draw(t,e,s,n){const i=this.pos.x-e.x+s/2,a=this.pos.y-e.y+n/2;t.save(),t.translate(i,a),t.rotate(this.angle);let r=1;if(this.isSinking&&(r=Math.max(0,1-this.sinkTimer/this.sinkDuration),t.globalAlpha=r),this.sprite){const c=this.length/this.sprite.width,l=this.sprite.width*c,h=this.sprite.height*c;t.drawImage(this.sprite,-l/2,-h/2,l,h)}else{const c=this.isSinking?"#666666":"#5b3b1a",l=this.isSinking?"#333333":"#2c1b0b";t.fillStyle=c,t.strokeStyle=l;const h=this.length,p=this.width;t.beginPath(),t.moveTo(+h/2,0),t.bezierCurveTo(+h/4,+p/2,-h/4,+p/2,-h/2,+p/3),t.lineTo(-h/2,-p/3),t.bezierCurveTo(-h/4,-p/2,+h/4,-p/2,+h/2,0),t.closePath(),t.fill(),t.lineWidth=2,t.stroke()}t.restore(),t.globalAlpha=1,this.drawDebugHitbox(t,e,s,n),this.isSinking||this.drawHealthBar(t,e,s,n)}drawHealthBar(t,e,s,n){const i=Math.max(0,Math.min(1,this.health/this.maxHealth)),a=this.pos.x-e.x+s/2,r=this.pos.y-e.y+n/2,c=Math.max(30,this.length*.5),l=6,h=r-this.width-18;t.save(),t.fillStyle="rgba(0,0,0,0.45)",t.fillRect(a-c/2,h,c,l),t.fillStyle=i>.5?"#34d399":i>.25?"#f59e0b":"#ef4444",t.fillRect(a-c/2,h,c*i,l);const p=Math.floor(this.maxHealth/100);if(p>=1){t.strokeStyle="rgba(255,255,255,0.5)",t.lineWidth=1;for(let m=1;m<=p;m++){const g=m*100;if(g>=this.maxHealth)break;const f=a-c/2+g/this.maxHealth*c+.5;t.beginPath(),t.moveTo(f,h),t.lineTo(f,h+l),t.stroke()}}t.strokeStyle="rgba(255,255,255,0.25)",t.lineWidth=1,t.strokeRect(a-c/2,h,c,l),t.restore()}drawDebugHitbox(t,e,s,n){const i=this.getHullPolygon();if(i.length<3)return;t.save(),t.strokeStyle="rgba(255, 255, 0, 0.8)",t.lineWidth=2,t.setLineDash([5,5]),t.beginPath();const a=i[0],r=a.x-e.x+s/2,c=a.y-e.y+n/2;t.moveTo(r,c);for(let l=1;l<i.length;l++){const h=i[l],p=h.x-e.x+s/2,m=h.y-e.y+n/2;t.lineTo(p,m)}t.closePath(),t.stroke(),t.fillStyle="rgba(255, 0, 0, 0.8)",t.setLineDash([]);for(const l of i){const h=l.x-e.x+s/2,p=l.y-e.y+n/2;t.beginPath(),t.arc(h,p,3,0,Math.PI*2),t.fill()}t.restore()}takeDamage(t){this.health=Math.max(0,this.health-t)}startSinking(){this.isSinking||(this.isSinking=!0,this.sinkTimer=0)}isFullySunk(){return this.isSinking&&this.sinkTimer>=this.sinkDuration}getHullPolygon(){const t=[],e=this.length,s=this.width;t.push(new d(e/2,0)),t.push(new d(e/4,s/2)),t.push(new d(-e/4,s/2)),t.push(new d(-e/2,s/3)),t.push(new d(-e/2,-s/3)),t.push(new d(-e/4,-s/2)),t.push(new d(e/4,-s/2));const n=[];for(const i of t){const a=this.localToWorld(i);n.push(a)}return n}pointInHull(t){const e=this.getHullPolygon();return this.pointInPolygon(t,e)}pointInPolygon(t,e){let s=!1;const n=e.length;for(let i=0,a=n-1;i<n;a=i++){const r=e[i].x,c=e[i].y,l=e[a].x,h=e[a].y;c>t.y!=h>t.y&&t.x<(l-r)*(t.y-c)/(h-c)+r&&(s=!s)}return s}hitsCircle(t,e){if(this.pointInHull(t))return!0;const s=this.getHullPolygon(),n=s.length;for(let i=0;i<n;i++){const a=s[i],r=s[(i+1)%n];if(this.lineIntersectsCircle(a,r,t,e))return!0}return!1}lineIntersectsCircle(t,e,s,n){const i=d.sub(e,t),a=d.sub(t,s),r=i.dot(i),c=2*a.dot(i),l=a.dot(a)-n*n,h=c*c-4*r*l;if(h<0)return!1;const p=Math.sqrt(h),m=(-c-p)/(2*r),g=(-c+p)/(2*r);return m>=0&&m<=1||g>=0&&g<=1}getCollisionRadius(){return Math.max(this.length*.35,this.width*.6)}getMass(){return this.length*this.width}addCannons(t){if(t<=0)return;const e=this.length*.18,s=this.length-e*2;for(let n=0;n<t;n++){const i=Math.random(),a=-this.length/2+e+s*i,r=this.width/2,c=2.2+Math.random()*1.4;this.cannons.push({offset:new d(a,+r),side:"starboard",reloadTime:c,cooldown:0}),this.starboardIndices.push(this.cannons.length-1),this.cannons.push({offset:new d(a,-r),side:"port",reloadTime:c*(.9+Math.random()*.2),cooldown:0}),this.portIndices.push(this.cannons.length-1)}}};o($,"_nextId",1);let V=$;const mt=520,yt=320,wt=2.5,St=1.6,xt=800,Mt=600,bt=150,J=6,vt=12;class G extends V{constructor(e,s={}){var n;super(s.ship??{},s.sprite);o(this,"target");o(this,"preferredSide");o(this,"fireRange",mt);o(this,"desiredDistance",yt);o(this,"aggressive",!1);o(this,"wanderTarget",null);o(this,"wanderTimer",0);this.target=e,this.preferredSide=((n=s.ai)==null?void 0:n.preferredSide)??(Math.random()<.5?"port":"starboard")}updateAI(e,s,n,i){const a=d.sub(this.target.pos,this.pos),r=a.len(),c=Math.atan2(a.y,a.x),l=this.angle+Math.PI/2;let h=R(c-l);this.preferredSide==="port"&&(h=R(h+Math.PI));const p=R(c-this.angle),m=this.aggressive?Math.max(0,Math.min(1,(220-r)/220))*.85:0;let g=R(h*(1-m)+p*m);const f=Math.max(160,this.length*St),w=new d(0,0),y=new d(0,0);let I=1/0,M=!1;for(const x of n){if(x===this)continue;const P=d.sub(x.pos,this.pos),b=P.len();if(b<=.001)continue;if(I=Math.min(I,b),b<f){const D=(f-b)/f,F=P.scale(-1/b);w.add(F.scale(D*D))}const X=d.sub(x.vel,this.vel),E=X.dot(X);if(E>1e-6){const D=-P.dot(X)/E,F=wt;if(D>0&&D<F){const L=d.add(P,d.scale(X,D)),B=(this.getCollisionRadius()+x.getCollisionRadius())*1.15;if(L.len()<B){const st=L.scale(-1/Math.max(1e-6,L.len())),it=(F-D)/F;y.add(st.scale(it)),M=!0}}}}const S=xt,T=(x,P,b)=>{y.x+=x*b,y.y+=P*b},v=this.pos.x-i.minX,k=i.maxX-this.pos.x,A=this.pos.y-i.minY,W=i.maxY-this.pos.y;v<S&&T(1,0,q(1-v/S)),k<S&&T(-1,0,q(1-k/S)),A<S&&T(0,1,q(1-A/S)),W<S&&T(0,-1,q(1-W/S));const U=Math.cos(l),j=Math.sin(l),C=new d(w.x+y.x,w.y+y.y);if(C.len()>.001){const x=C.x*U+C.y*j,P=this.aggressive?.5:1,b=Math.max(-.7,Math.min(.7,x))*P;g=R(g+b)}let H=!1,_=!1,N=!1,Y=!1,z=!1;if(this.aggressive){_=g>.1,N=g<-.1;const x=Math.max(140,this.desiredDistance*.6),P=r<x*.8?-1:r>x*1.2?1:0;Y=P>0||this.vel.len()<this.maxSpeed*.35,z=P<0,I<f*.6&&(Y=!1,z=!0),M&&(Y=!1,z=!0);const b=this.fireRange*1.15;H=Math.abs(g)<.25&&r<=b}else{this.wanderTimer-=e;const x=Mt;if(!this.wanderTarget||this.wanderTimer<=0||d.sub(this.wanderTarget,this.pos).len()<bt){const L=Z(i.minX+x,i.maxX-x),B=Z(i.minY+x,i.maxY-x);this.wanderTarget=new d(L,B),this.wanderTimer=J+Math.random()*(vt-J)}const b=this.wanderTarget?d.sub(this.wanderTarget,this.pos):new d(0,0),X=Math.atan2(b.y,b.x);let E=R(X-this.angle);if(C.len()>.001){const L=Math.atan2(C.y,C.x);E=R(E+R(L-(this.angle+Math.PI))*.6)}_=E>.08,N=E<-.08;const D=.5*this.maxSpeed+.5*this.maxSpeed*Math.random();Y=this.vel.len()<D,(Math.min(v,k,A,W)<400||M||I<f*.6)&&(Y=!1,z=!0),H=!1}super.update(e,{up:Y,down:z,left:N,right:_,fire:H},s)}}function R(u){for(;u>Math.PI;)u-=Math.PI*2;for(;u<-Math.PI;)u+=Math.PI*2;return u}function Z(u,t){return u+Math.random()*(t-u)}function q(u){return u*u}class Pt extends tt{constructor(t,e,s){super(t,e,s),this.radius=6,this.maxLife=25,this.damage=100}draw(t,e,s,n){const i=this.pos.x-e.x+s/2,a=this.pos.y-e.y+n/2;t.save(),t.translate(i,a);const r=Math.atan2(this.vel.y,this.vel.x);t.rotate(r),t.fillStyle="#374151",t.strokeStyle="#111827",t.lineWidth=2,t.beginPath(),t.rect(-10,-4,20,8),t.fill(),t.stroke(),t.fillStyle="#9ca3af",t.beginPath(),t.moveTo(10,0),t.lineTo(6,4),t.lineTo(6,-4),t.closePath(),t.fill(),t.restore()}}class It{constructor(t){o(this,"canvas");o(this,"ctx");o(this,"dpr");o(this,"input");o(this,"camera");o(this,"gameWorld");o(this,"entityManager");o(this,"collisionSystem");o(this,"hudSystem");o(this,"config");o(this,"shipSprite");o(this,"isRunning",!1);o(this,"lastFrameTime",0);o(this,"playerXP",0);o(this,"upgradeCosts",{repair:100,reinforce:100,cannons:100});o(this,"healJobs",[]);o(this,"torpedoTubes",[]);o(this,"playerRespawnTimer",null);o(this,"treasures",[]);o(this,"gameLoop",()=>{if(!this.isRunning)return;const t=performance.now(),e=(t-this.lastFrameTime)/1e3;this.lastFrameTime=t;const s=Math.min(.033,e);this.update(s),this.render(),requestAnimationFrame(this.gameLoop)});this.canvas=t,this.ctx=t.getContext("2d"),this.dpr=window.devicePixelRatio||1,this.config=this.createGameConfig(),this.input=new ot,this.camera=new lt,this.camera.setVelocityLeadFactor(this.config.cameraVelocityLead),this.gameWorld=new ht(this.config.world),this.entityManager=new ct,this.collisionSystem=new dt({restitution:this.config.physics.collisionRestitution,friction:this.config.physics.collisionFriction,damageCooldown:this.config.physics.ramDamageCooldown}),this.hudSystem=new pt,this.setupCanvasResize()}createGameConfig(){return{world:{bounds:{minX:-4e3,maxX:4e3,minY:-4e3,maxY:4e3},boundaryBounce:.4},cameraVelocityLead:.25,player:{length:140,width:48,cannonPairs:8,maxHealth:140,maxSpeed:180,thrust:50,reverseThrust:20,turnAccel:1.5,rudderRate:2,linearDrag:.4,angularDrag:2},ai:{length:95,width:36,cannonPairs:3,maxHealth:60,maxSpeed:170,thrust:48,reverseThrust:18,turnAccel:1,rudderRate:1.5,linearDrag:.4,angularDrag:2,totalStartingShips:16,startInViewCount:4,spawnAnnulusMinR:600,spawnAnnulusMaxR:2600,offmapSpawnDistance:500,spawnInViewMargin:100,minEnemiesInView:2,maxEnemiesTotal:16,aggressiveMinCount:2},physics:{collisionRestitution:.2,collisionFriction:.08,ramDamageCooldown:.6},progression:{treasurePickupRadius:80,respawnSecondsAfterSunk:5,shopHealDuration:5,torpedoCostXP:300,torpedoReloadS:15,torpedoArmingS:1,torpedoSpeed:140,upgradeBaseCostXP:100,upgradeInflation:1.2}}}async initialize(){this.hudSystem.initialize();try{this.shipSprite=await rt.loadImage("/ship.webp")}catch{console.warn("Ship sprite not found, using vector rendering")}this.initializeGameWorld(),this.resize()}initializeGameWorld(){const t=new V({length:this.config.player.length,width:this.config.player.width,cannonPairs:this.config.player.cannonPairs},this.shipSprite);this.configurePlayerShip(t),this.entityManager.setPlayer(t),this.hudSystem.setupForPlayer(t,this.torpedoTubes),this.hudSystem.getOverlayManager(),this.spawnInitialAIShips()}configurePlayerShip(t){const e=this.config.player;t.isPlayer=!0,t.maxHealth=e.maxHealth,t.health=e.maxHealth,t.maxSpeed=e.maxSpeed,t.thrust=e.thrust,t.reverseThrust=e.reverseThrust,t.turnAccel=e.turnAccel,t.rudderRate=e.rudderRate,t.linDrag=e.linearDrag,t.angDrag=e.angularDrag}spawnInitialAIShips(){this.entityManager.player;const t=this.config.ai;for(let s=0;s<t.startInViewCount;s++){const n=this.createAIShipInView();this.entityManager.addShip(n)}const e=t.totalStartingShips-t.startInViewCount;for(let s=0;s<e;s++){const n=this.createAIShipAroundPlayer();this.entityManager.addShip(n)}this.ensureAggressiveAI()}createAIShipInView(){const t=this.entityManager.player,e=this.camera.getViewport(this.canvas.width,this.canvas.height,this.dpr),s=this.config.ai.spawnInViewMargin,n=e.left+s+Math.random()*(e.width-s*2),i=e.top+s+Math.random()*(e.height-s*2),a=this.createConfiguredAIShip();a.pos.set(n,i);const r=d.sub(t.pos,a.pos);return a.angle=Math.atan2(r.y,r.x)+(Math.random()-.5)*.6,a}createAIShipAroundPlayer(){const t=this.entityManager.player,e=this.config.ai,s=Math.random()*Math.PI*2,n=Math.sqrt(Math.random()*(e.spawnAnnulusMaxR**2-e.spawnAnnulusMinR**2)+e.spawnAnnulusMinR**2),i=this.createConfiguredAIShip();return i.pos.set(t.pos.x+Math.cos(s)*n,t.pos.y+Math.sin(s)*n),i.angle=s+(Math.random()-.5)*.6,i}createAIShipBeyondWorld(){const t=this.config.ai,e=this.gameWorld.getBounds(),s=t.offmapSpawnDistance,n=Math.floor(Math.random()*4);let i,a;switch(n){case 0:i=(Math.random()-.5)*(e.maxX-e.minX)*1.5,a=e.minY-s;break;case 1:i=e.maxX+s,a=(Math.random()-.5)*(e.maxY-e.minY)*1.5;break;case 2:i=(Math.random()-.5)*(e.maxX-e.minX)*1.5,a=e.maxY+s;break;default:i=e.minX-s,a=(Math.random()-.5)*(e.maxY-e.minY)*1.5;break}const r=this.createConfiguredAIShip();r.pos.set(i,a);const c=d.sub(new d(0,0),r.pos).normalize();r.angle=Math.atan2(c.y,c.x)+(Math.random()-.5)*.8;const l=50+Math.random()*50;return r.vel.set(c.x*l,c.y*l),r}createConfiguredAIShip(){const t=this.entityManager.player,e=this.config.ai,s=new G(t,{ship:{length:e.length,width:e.width,cannonPairs:e.cannonPairs},sprite:this.shipSprite});return s.maxHealth=e.maxHealth,s.health=e.maxHealth,s.maxSpeed=e.maxSpeed,s.thrust=e.thrust,s.reverseThrust=e.reverseThrust,s.turnAccel=e.turnAccel,s.rudderRate=e.rudderRate,s.linDrag=e.linearDrag,s.angDrag=e.angularDrag,s}start(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=performance.now(),this.gameLoop())}stop(){this.isRunning=!1}update(t){const e=this.entityManager.player;if(!e)return;if(!this.hudSystem.getOverlayManager().isUpgradeOverlayVisible()){const n=this.getPlayerControls();e.update(t,n,this.entityManager.getAllProjectiles()),this.gameWorld.applyWorldBoundsToShip(e),this.updateAIShips(t),this.camera.followTarget(e.pos,e.vel),this.entityManager.update(t),this.collisionSystem.update(t),this.collisionSystem.resolveShipCollisions(this.entityManager.getAllShips()),this.handleProjectileCollisions(),this.updateProgressionSystems(t),this.maintainAIPopulation(),this.ensureAggressiveAI(),this.entityManager.cleanup()}this.updatePlayerRespawn(t),this.hudSystem.update(e,this.playerXP,this.canAffordAnyUpgrade(),this.torpedoTubes),this.handleUIInput()}getPlayerControls(){return{up:this.input.isDown("ArrowUp"),down:this.input.isDown("ArrowDown"),left:this.input.isDown("ArrowLeft"),right:this.input.isDown("ArrowRight"),fire:this.input.isDown("Space")}}updateAIShips(t){const e=this.entityManager.getEnemyShips().filter(i=>i instanceof G),s=this.entityManager.getAllShips(),n=this.gameWorld.getBounds();for(const i of e)i.updateAI(t,this.entityManager.getAllProjectiles(),s,n),this.gameWorld.applyWorldBoundsToShip(i)}handleProjectileCollisions(){const t=this.entityManager.getAllProjectiles(),e=this.entityManager.getAllShips();this.gameWorld.getBounds();for(let n=t.length-1;n>=0;n--){const i=t[n];this.gameWorld.isPositionOutsideWorld(i.pos)&&t.splice(n,1)}const s=this.collisionSystem.checkProjectileHits(t,e);for(const n of s)n.projectile.owner===this.entityManager.player&&(this.addXP(n.damage),n.wasKilled&&(this.addXP(20),n.ship!==this.entityManager.player&&this.treasures.push({pos:n.ship.pos.clone(),collected:!1})))}updateProgressionSystems(t){const e=this.entityManager.player;if(!(!e||e.isSinking)){for(const s of this.treasures)!s.collected&&e.hitsCircle(s.pos,this.config.progression.treasurePickupRadius)&&(s.collected=!0,this.addXP(40));this.applyHealingOverTime(t,e),this.updateTorpedoSystems(t)}}applyHealingOverTime(t,e){for(let s=this.healJobs.length-1;s>=0;s--){const n=this.healJobs[s];if(e.health>=e.maxHealth){this.healJobs.splice(s,1);continue}const i=Math.min(n.perSec*t,e.maxHealth-e.health,n.remaining);i>0&&(e.health+=i,n.remaining-=i),n.remaining<=.001&&this.healJobs.splice(s,1)}}updateTorpedoSystems(t){const e=this.entityManager.player;if(e){for(const s of this.torpedoTubes)if(s.cooldown>0&&(s.cooldown-=t),s.arming>0&&(s.arming-=t,s.arming<=0)){const n=e.forwardVec(),i=d.add(e.pos,d.scale(n,e.length*.55)),a=d.add(e.vel,d.scale(n,this.config.progression.torpedoSpeed));this.entityManager.addProjectile(new Pt(i,a,e)),s.cooldown=this.config.progression.torpedoReloadS}if(this.input.wasPressed("KeyT")){const s=this.torpedoTubes.find(n=>n.cooldown<=0&&n.arming<=0);s&&(s.arming=this.config.progression.torpedoArmingS)}}}maintainAIPopulation(){const t=this.camera.getViewport(this.canvas.width,this.canvas.height,this.dpr),e=this.entityManager.getShipsInViewport(t).filter(i=>i!==this.entityManager.player&&!i.isSinking).length,s=this.config.ai,n=this.entityManager.getEnemyShips().length;for(;e<s.minEnemiesInView&&n<s.maxEnemiesTotal;){const i=this.createAIShipBeyondWorld();this.entityManager.addShip(i)}}ensureAggressiveAI(){const t=this.entityManager.player,e=this.entityManager.getEnemyShips().filter(s=>s instanceof G&&!s.isSinking);e.sort((s,n)=>d.sub(s.pos,t.pos).len()-d.sub(n.pos,t.pos).len());for(let s=0;s<e.length;s++){const n=s<this.config.ai.aggressiveMinCount;e[s].aggressive=n}}updatePlayerRespawn(t){const e=this.entityManager.player;e&&(e.isSinking&&e.isFullySunk()&&this.playerRespawnTimer===null&&(this.playerRespawnTimer=this.config.progression.respawnSecondsAfterSunk),this.playerRespawnTimer!==null&&(this.playerRespawnTimer-=t,this.hudSystem.getOverlayManager().showRespawnCountdown(this.playerRespawnTimer),this.playerRespawnTimer<=0&&(this.respawnPlayer(),this.playerRespawnTimer=null,this.hudSystem.getOverlayManager().hideRespawnCountdown())))}respawnPlayer(){const t=this.entityManager.player;this.entityManager.removeShip(t);const e=new V({length:this.config.player.length,width:this.config.player.width,cannonPairs:this.config.player.cannonPairs},this.shipSprite);this.configurePlayerShip(e),e.pos.set(0,0),e.angle=-Math.PI/2,this.entityManager.setPlayer(e),this.hudSystem.setupForPlayer(e,this.torpedoTubes);const s=this.entityManager.getEnemyShips().filter(n=>n instanceof G);for(const n of s)n.target=e}handleUIInput(){const t=this.hudSystem.getOverlayManager();t.isUpgradeOverlayVisible()?this.input.wasPressed("Digit1")||this.input.wasPressed("Numpad1")?this.applyUpgrade("repair"):this.input.wasPressed("Digit2")||this.input.wasPressed("Numpad2")?this.applyUpgrade("reinforce"):this.input.wasPressed("Digit3")||this.input.wasPressed("Numpad3")?this.applyUpgrade("cannons"):(this.input.wasPressed("Escape")||this.input.wasPressed("KeyS"))&&t.closeUpgradeOverlay():this.input.wasPressed("KeyS")&&t.openUpgradeOverlay(this.playerXP,this.upgradeCosts,e=>{this.applyUpgrade(e)}),this.input.updateFrame()}applyUpgrade(t){const e=this.entityManager.player,s=this.config.progression;switch(t){case"repair":if(this.playerXP>=this.upgradeCosts.repair){this.playerXP-=this.upgradeCosts.repair;const i=Math.min(e.maxHealth*.5,e.maxHealth-e.health);this.scheduleHealing(i)}break;case"reinforce":this.playerXP>=this.upgradeCosts.reinforce&&(this.playerXP-=this.upgradeCosts.reinforce,e.maxHealth+=30,this.scheduleHealing(30),this.upgradeCosts.reinforce=Math.ceil(this.upgradeCosts.reinforce*s.upgradeInflation));break;case"cannons":this.playerXP>=this.upgradeCosts.cannons&&(this.playerXP-=this.upgradeCosts.cannons,e.addCannons(2),this.hudSystem.setupForPlayer(e,this.torpedoTubes),this.upgradeCosts.cannons=Math.ceil(this.upgradeCosts.cannons*s.upgradeInflation));break}this.hudSystem.getOverlayManager().openUpgradeOverlay(this.playerXP,this.upgradeCosts,i=>{this.applyUpgrade(i)})}addXP(t){t>0&&(this.playerXP+=t)}canAffordAnyUpgrade(){return this.playerXP>=Math.min(this.upgradeCosts.repair,this.upgradeCosts.reinforce,this.upgradeCosts.cannons)}scheduleHealing(t){t>0&&this.healJobs.push({remaining:t,perSec:t/this.config.progression.shopHealDuration})}render(){const t=this.canvas.width/this.dpr,e=this.canvas.height/this.dpr;this.drawOcean(t,e),this.drawWorldBounds(t,e),this.entityManager.draw(this.ctx,this.camera.position,t,e),this.drawTreasures(t,e),this.hudSystem.drawToCanvas(this.ctx,this.entityManager.getAllShips(),this.camera.position,t,e,this.gameWorld.getBounds())}drawOcean(t,e){const s=this.camera.position,n=this.ctx.createLinearGradient(0,0,0,e);n.addColorStop(0,"#0b355f"),n.addColorStop(1,"#0a2744"),this.ctx.fillStyle=n,this.ctx.fillRect(0,0,t,e);const i=80,a=5,r=s.x-t/2,c=s.y-e/2,l=Math.floor(r/i)*i,h=Math.floor(c/i)*i;this.ctx.save();for(let p=l,m=0;p<=s.x+t/2;p+=i,m++){const g=p-s.x+t/2,f=m%a===0;this.ctx.strokeStyle=f?"rgba(255,255,255,0.15)":"rgba(255,255,255,0.07)",this.ctx.lineWidth=f?1.5:1,this.ctx.beginPath(),this.ctx.moveTo(g,0),this.ctx.lineTo(g,e),this.ctx.stroke()}for(let p=h,m=0;p<=s.y+e/2;p+=i,m++){const g=p-s.y+e/2,f=m%a===0;this.ctx.strokeStyle=f?"rgba(255,255,255,0.15)":"rgba(255,255,255,0.07)",this.ctx.lineWidth=f?1.5:1,this.ctx.beginPath(),this.ctx.moveTo(0,g),this.ctx.lineTo(t,g),this.ctx.stroke()}this.ctx.restore()}drawWorldBounds(t,e){const s=this.camera.position,n=this.gameWorld.getBounds(),i=n.minX-s.x+t/2,a=n.minY-s.y+e/2,r=n.maxX-s.x+t/2,c=n.maxY-s.y+e/2;this.ctx.save(),this.ctx.strokeStyle="rgba(255,255,255,0.25)",this.ctx.lineWidth=2,this.ctx.strokeRect(i,a,r-i,c-a),this.ctx.restore()}drawTreasures(t,e){this.camera.position;const s=this.config.progression.treasurePickupRadius;for(const n of this.treasures){if(n.collected)continue;const i=this.camera.worldToScreen(n.pos,this.canvas.width,this.canvas.height,this.dpr);this.ctx.save(),this.ctx.translate(i.x,i.y),this.ctx.strokeStyle="rgba(255,255,255,0.25)",this.ctx.lineWidth=1.5,this.ctx.setLineDash([6,6]),this.ctx.beginPath(),this.ctx.arc(0,0,s,0,Math.PI*2),this.ctx.stroke(),this.ctx.setLineDash([]),this.ctx.fillStyle="#d97706",this.ctx.strokeStyle="#92400e",this.ctx.lineWidth=2,this.ctx.fillRect(-10,-8,20,16),this.ctx.strokeRect(-10,-8,20,16),this.ctx.fillStyle="#f59e0b",this.ctx.fillRect(-10,-12,20,8),this.ctx.strokeRect(-10,-12,20,8),this.ctx.fillStyle="#fbbf24",this.ctx.beginPath(),this.ctx.arc(0,0,2,0,Math.PI*2),this.ctx.fill(),this.ctx.restore()}}resize(){const t=Math.floor(window.innerWidth),e=Math.floor(window.innerHeight);this.canvas.width=Math.floor(t*this.dpr),this.canvas.height=Math.floor(e*this.dpr),this.canvas.style.width=t+"px",this.canvas.style.height=e+"px",this.ctx.setTransform(this.dpr,0,0,this.dpr,0,0)}setupCanvasResize(){window.addEventListener("resize",()=>this.resize()),this.resize()}}const et=document.getElementById("game");if(!et)throw new Error('Game canvas element not found! Make sure index.html has a canvas with id="game"');const Q=new It(et);async function Tt(){try{console.log("Initializing pirate ship game..."),await Q.initialize(),console.log("Game initialization complete. Starting game loop..."),Q.start(),console.log("Game started successfully!")}catch(u){console.error("Failed to initialize game:",u);const t=document.createElement("div");t.style.cssText=`
      position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8); color: white; padding: 20px; border-radius: 8px;
      font-family: monospace; text-align: center; z-index: 10000;
    `,t.innerHTML=`
      <h2>Game Failed to Load</h2>
      <p>Error: ${u instanceof Error?u.message:"Unknown error"}</p>
      <p>Please refresh the page to try again.</p>
    `,document.body.appendChild(t)}}Tt();
